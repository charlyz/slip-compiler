method main(){ lab34  [ lab34 : toto#1 := new/0 ; go to lab33]  [ lab33 : lulu#2 := new/1 ; go to lab32]  [ lab32 : lili#3 := new/2 ; go to lab31]  [ lab31 : lulu#2.1 := 0 - 3 ; go to lab30]  [ lab30 : lili#3.1 := 0 - 5 ; go to lab29]  [ lab29 : lili#3.2 := 2375678 ; go to lab28]  [ lab28 : #5 := toto#1 ; go to lab27]  [ lab27 : #4 := toto#1.lexComp(#5) ; go to lab26]  [ lab26 : write(#4) ; go to lab25]  [ lab25 : #5 := lulu#2 ; go to lab24]  [ lab24 : #4 := toto#1.lexComp(#5) ; go to lab23]  [ lab23 : write(#4) ; go to lab22]  [ lab22 : #5 := lili#3 ; go to lab21]  [ lab21 : #4 := toto#1.lexComp(#5) ; go to lab20]  [ lab20 : write(#4) ; go to lab19]  [ lab19 : #5 := toto#1 ; go to lab18]  [ lab18 : #4 := lulu#2.lexComp(#5) ; go to lab17]  [ lab17 : write(#4) ; go to lab16]  [ lab16 : #5 := lulu#2 ; go to lab15]  [ lab15 : #4 := lulu#2.lexComp(#5) ; go to lab14]  [ lab14 : write(#4) ; go to lab13]  [ lab13 : #5 := lili#3 ; go to lab12]  [ lab12 : #4 := lulu#2.lexComp(#5) ; go to lab11]  [ lab11 : write(#4) ; go to lab10]  [ lab10 : #5 := toto#1 ; go to lab9]  [ lab9 : #4 := lili#3.lexComp(#5) ; go to lab8]  [ lab8 : write(#4) ; go to lab7]  [ lab7 : #5 := lulu#2 ; go to lab6]  [ lab6 : #4 := lili#3.lexComp(#5) ; go to lab5]  [ lab5 : write(#4) ; go to lab4]  [ lab4 : #5 := lili#3 ; go to lab3]  [ lab3 : #4 := lili#3.lexComp(#5) ; go to lab2]  [ lab2 : write(#4) ; go to lab1]} lab1 result#0end of method main.method level/0(){ lab36  [ lab36 : result#0 := 0 ; go to lab35]} lab35 result#0end of method level.method level/1(){ lab38  [ lab38 : result#0 := 1 ; go to lab37]} lab37 result#0end of method level.method level/2(){ lab40  [ lab40 : result#0 := 2 ; go to lab39]} lab39 result#0end of method level.method level/3(){ lab42  [ lab42 : result#0 := 3 ; go to lab41]} lab41 result#0end of method level.method level/4(){ lab44  [ lab44 : result#0 := 4 ; go to lab43]} lab43 result#0end of method level.method level/5(){ lab46  [ lab46 : result#0 := 5 ; go to lab45]} lab45 result#0end of method level.method comp/0(other){ lab48  [ lab48 : result#0 := 0 ; go to lab47]} lab47 result#0end of method comp.method comp/1(other){ lab62  [ lab62 : #4 := other#1 ; go to lab61]  [ lab61 : sup#2 := super.comp(#4) ; go to lab60]  [ lab60 : if sup#2 == 0 then go to lab58 else go to lab59]  [ lab58 : #4 := other#1.level() ; go to lab57]  [ lab57 : if #4 < 1 then go to lab56 else go to lab55]  [ lab56 : result#0 := 1 ; go to lab49]  [ lab55 : thisOne#3 := this ; go to lab54]  [ lab54 : if thisOne#3.1 < other#1.1 then go to lab53 else go to lab52]  [ lab53 : result#0 := 0 - 1 ; go to lab49]  [ lab52 : if other#1.1 < thisOne#3.1 then go to lab51 else go to lab50]  [ lab51 : result#0 := 1 ; go to lab49]  [ lab50 : result#0 := 0 ; go to lab49]  [ lab59 : result#0 := sup#2 ; go to lab49]} lab49 result#0end of method comp.method comp/2(other){ lab76  [ lab76 : #4 := other#1 ; go to lab75]  [ lab75 : sup#2 := super.comp(#4) ; go to lab74]  [ lab74 : if sup#2 == 0 then go to lab72 else go to lab73]  [ lab72 : #4 := other#1.level() ; go to lab71]  [ lab71 : if #4 < 2 then go to lab70 else go to lab69]  [ lab70 : result#0 := 1 ; go to lab63]  [ lab69 : thisOne#3 := this ; go to lab68]  [ lab68 : if thisOne#3.2 < other#1.2 then go to lab67 else go to lab66]  [ lab67 : result#0 := 0 - 1 ; go to lab63]  [ lab66 : if other#1.2 < thisOne#3.2 then go to lab65 else go to lab64]  [ lab65 : result#0 := 1 ; go to lab63]  [ lab64 : result#0 := 0 ; go to lab63]  [ lab73 : result#0 := sup#2 ; go to lab63]} lab63 result#0end of method comp.method lexComp/0(other){ lab85  [ lab85 : #3 := level() ; go to lab84]  [ lab84 : #2 := other#1.level() ; go to lab83]  [ lab83 : if #3 < #2 then go to lab82 else go to lab79]  [ lab82 : #3 := this ; go to lab81]  [ lab81 : #2 := other#1.comp(#3) ; go to lab80]  [ lab80 : result#0 := 0 - #2 ; go to lab77]  [ lab79 : #2 := other#1 ; go to lab78]  [ lab78 : result#0 := comp(#2) ; go to lab77]} lab77 result#0end of method lexComp.
