//AAAAA COP  ii, aaaaaa(jj) 
2000    LDA   1, 1004        // R1 = 1004
2004    JUMP 15, 3000        // R0 = a*b - c*d
2008    STM   0, 1000        // Mot[1000] = a*b - c*d
2012    HALT  0, 0
//
// Sous-programme de calcul de a*b - c*d (en virgule flottante)
// ------------------------------------------------------------
// Précondition :  - a, b, c, et d sont les mots d'adresses 
// ------------      R1, R1 + 4, R1 + 8, R1 + 12  ;
//                 - l'adresse de retour est dans R15.
//
// Postcondition : - R0 = a*b - c*d  ; 
// -------------   - la mémoire est inchangée ;
//                 - les registres R1 et R4 à R15 sont inchangés.
//AAAAA COP  ii, aaaaaa(jj) 
3000    LDM   0,      0(1) // R0 = a
3004    LDM   2,      4(1) // R2 = b
3008    MULF  0, 2         // R0 = a * b
3010    LDM   2,      8(1) // R2 = c
3014    LDM   3,     12(1) // R3 = d
3018    MULF  2, 3         // R2 = c * d
3020    SUBF  0, 2         // R0 = a * b - c * d
3022    JUMP  0,      0(15)// retour de sous-programme
1004    LIT  F(1.2)        // a
1008    LIT  F(1.3)        // b
1012    LIT  F(1.4)        // c
1016    LIT  F(1.5)        // d




